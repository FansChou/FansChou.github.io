<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>六脉神间</title>
  
  <subtitle>泛舟的技术小铺</subtitle>
  <link href="https://www.fanschou.com/atom.xml" rel="self"/>
  
  <link href="https://www.fanschou.com/"/>
  <updated>2022-09-22T05:14:52.000Z</updated>
  <id>https://www.fanschou.com/</id>
  
  <author>
    <name>Fan Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用Redis滑动窗口解决CPU100%的问题</title>
    <link href="https://www.fanschou.com/redis/redis-sliding-window/"/>
    <id>https://www.fanschou.com/redis/redis-sliding-window/</id>
    <published>2022-09-22T05:14:52.000Z</published>
    <updated>2022-09-22T05:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近接了个老项目的维护，不多说了，都是坑（流泪ing），然后就慢慢的解决一些问题。首先就是这个项目用的Redis集群总是告警，CPU总是90%以上，严重影响了业务的稳定性，所以先对这个下手。</p><h2 id="分析问题">分析问题</h2><p>Redis 的 CPU 飙升可能有很多原因，先从慢日志开始排查，立马就发现了问题，请求中有大量的 <code>keys</code> 命令去扫 key，大量的模糊搜索 key 导致了 Redis 的 CPU 升高。然后根据 <code>keys</code> 扫描的 key 值去代码中查找，发现基本集中在一块业务中，这里我抽象一下这块的业务，简单描述一下。</p><p>这个项目做的是一个自动打电话的业务，每个电话在一段时间内只能呼出固定次数，这里有两个关键点：<strong>一段时间内</strong>和<strong>固定次数</strong>。项目老代码的实现就秀了啊，每次拨打之后存一个 key ，格式类似于 <code>call_电话号码_时间戳</code> ，然后 key 的过期时间就设置成前面说的<strong>一段时间内</strong>这个时间长度。当进行拨打前置校验时，直接通过 <code>keys call_电话号码_*</code> 扫描拿到这个电话打过的次数，因为设置了过期时间，所以有效的 key 的个数，就是一段时间内已经呼出的次数，再用这个次数和阈值比较即可。从这个方面来说，这个方案确实也实现了业务要求，但是 Redis 就被一次次的 <code>keys</code> 命令扫爆了。</p><h2 id="新的解决方案">新的解决方案</h2><p>在原因分析中，其实已经发现了，我们需要统计一段时间内的电话拨打次数，因为时间往前走的关系，这个<strong>一段时间</strong>所囊括的时间范围也是不断往前移动的。这个场景就很熟悉了，就是典型的滑动窗口问题，而用 Redis 去实现的话，有比前面那种更优雅的方式。这里我们采用了 <code>zset</code> 去实现滑动窗口。</p><p>我们以 <code>call_电话号码</code> 作为 <code>zset</code> 的key，然后每打一个电话，往这个 <code>zset</code> 添加一个 value 和 score ， value 这里我们用了时间戳，因为估算的并发可以确保这个 value 不会重复，这里要注意一点，就是 value 一定要确保不能重复，否则 <code>zset</code> 的数量是不准的，可能比你实际的数量偏小； score 这里用的也是时间戳，当来请求校验的时候，先使用 <code>zremrangeByScore</code> 命令，移除掉超过时间区间的 value ，然后 <code>zcard</code> 命令再去统计 value 的数量，就是我们要的一段时间内已经呼出的次数。这里连续操作了两次 Redis ，所以可以用 <code>pipeline</code> 去把操作放在一起。</p><h2 id="代码实现">代码实现</h2><p>下面我用 Java 写一下简单的样板，用的是 Jedis 操作 Redis 。</p><p>添加记录的地方很简单，就是一条 <code>zadd</code> 命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.zadd(key, score, member);</span><br></pre></td></tr></table></figure><p>然后在判断限制的地方，获取 <code>zset</code> 的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查看限流周期内的行为次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key           行为key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> period        限流周期,unit=second</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getActivityTimes</span><span class="params">(String key, <span class="type">int</span> period)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> getJedis())&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ts</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Pipeline</span> <span class="variable">pipe</span> <span class="operator">=</span> jedis.pipelined();</span><br><span class="line">        pipe.multi();</span><br><span class="line">        <span class="comment">// 移除滑动窗口之外的数据</span></span><br><span class="line">        pipe.zremrangeByScore(key, <span class="number">0</span>, ts - (period * <span class="number">1000.0</span>));</span><br><span class="line">        Response&lt;Long&gt; zcount = pipe.zcard(key);</span><br><span class="line">        <span class="comment">// 设置行为的过期时间，如果数据为冷数据，zset将会删除以此节省内存空间</span></span><br><span class="line">        pipe.expire(key, period);</span><br><span class="line">        pipe.exec();</span><br><span class="line">        pipe.close();</span><br><span class="line">        count = zcount.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;redis getActivityTimes error, key: &#123;&#125;&quot;</span>, key, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先用 <code>zremrangeByScore</code> 删除过期的 value ，然后 <code>zcard</code> 统计数量，同时设置了 key 的过期时间，避免长期占用内存。</p><h2 id="优化后">优化后</h2><p>上述的改动发布之后，Redis的CPU占用就直线下降了，说明这次的优化还是很有成效的。<br><img src="https://images.fanschou.com/blog/redis-sliding-window/20220922_01_001.png" alt="Redis的CPU占用"></p><p>如果你也有相关类似的问题，也可以参考这种方案，当然你也可以单纯使用滑动窗口用在别的业务实现上。希望你也能有所收获。</p>]]></content>
    
    
    <summary type="html">在高并发的情况中，经常需要考虑的一个问题就是线程之间的死锁问题，并且总结出了很多最佳实践，这篇文章我们就来聊聊导致死锁的原因，以及如何避免产生死锁。</summary>
    
    
    
    <category term="redis" scheme="https://www.fanschou.com/categories/redis/"/>
    
    
    <category term="redis" scheme="https://www.fanschou.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>使用acme申请TLS证书</title>
    <link href="https://www.fanschou.com/devops/apply-for-TLS-certificate-using-acme/"/>
    <id>https://www.fanschou.com/devops/apply-for-TLS-certificate-using-acme/</id>
    <published>2022-09-06T05:14:52.000Z</published>
    <updated>2022-09-06T05:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>当前互联网中最多的流量应该是HTTP流量，但是HTTP流量相当于是明文的数据，也就是说在开放的互联网中，它是毫无保护的信息。随着时代的发展，越来越多的网站会为自己的HTTP流量套上一层加密，也就是我们所熟知的HTTPS流量，它与HTTP流量的区别就是它有一层TLS加密，整个加密的原理及流程，不是本篇文章的重点，本篇文章主要会指导你如何申请一个TLS证书。<br>TLS刚出来的时候，大多都是需要付费获得，这就导致了大部分小站点的站长可能不愿意或者没有能力每年去负担这个费用，好随着 HTTPS 的普及，出现了一些免费提供TLS证书的机构，所产生的不方便之处也不过是证书有效期比较短，这对我们来说，是属于可以克服的困难。这里我们使用letsencrypt提供的免费证书服务。<br>为了方便的申请证书而不需要与证书机构的API打交道，网络上也有很多的工具，这里我会使用一个叫做 <a href="https://github.com/acmesh-official/acme.sh">acme.sh</a> 的证书管理工具，它简单、轻量、高效，并可完成证书自动更新。让我们开始吧～</p><h2 id="安装-acme-sh">安装 <code>acme.sh</code></h2><p>使用官方安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O -  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>普通用户和 root 用户都可以安装使用。脚本会把相关文件都放在<code>~/.acme.sh/</code>下，并创建 一个 bash 的 alias, 方便你的使用： <code>alias acme.sh=~/.acme.sh/acme.sh</code>，安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code>。当然也有其他高级的安装选项，可以自行查看官网的<a href="https://github.com/acmesh-official/acme.sh/wiki/How-to-install">安装教程</a>。</p><p>尝试执行<code>acme.sh</code>，这个时候，可能会提示命令不存在，通过刷新一下环境生效配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. .bashrc</span><br></pre></td></tr></table></figure><p>设置自动更新acme</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --upgrade --auto-upgrade</span><br></pre></td></tr></table></figure><p>因为<code>acme.sh</code>目前支持不止一个免费证书注册机构，这里我们设置默认为<code>letsencrypt</code>，<code>acme.sh</code>本身默认的<code>zerossl</code>需要邮箱，还是<code>letsencrypt</code>更简单更广泛应用一点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --set-default-ca --server letsencrypt</span><br></pre></td></tr></table></figure><h2 id="证书申请">证书申请</h2><p><code>acme.sh</code>支持两种方式验证: <strong>HTTP</strong> 和 <strong>DNS 验证</strong>。我个人更推荐<strong>DNS 验证</strong>，这种方式的好处是，你不需要任何服务器，不需要任何公网IP，只需要 DNS 的解析记录即可完成验证。坏处是，如果不同时配置 <code>Automatic DNS API</code>，使用这种方式 <code>acme.sh</code> 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。下面会以<strong>DNS 验证</strong>为例介绍证书申请。</p><h3 id="dns验证申请证书">dns验证申请证书</h3><h4 id="手动设置DNS记录申请">手动设置DNS记录申请</h4><p>执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue --dns -d 三级域名.mydomain.com --keylength ec-256 --<span class="built_in">log</span> \</span><br><span class="line"> --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure><p>这时，<a href="http://acme.sh">acme.sh</a> 会生成相应的解析记录显示出来，会有一个txt记录的key，格式为<code>_acme-challenge.你的三级域名</code>，然后有一串字符串作为值，你只需要在你的域名管理面板中添加这条 txt 记录即可。</p><p><img src="https://images.fanschou.com/blog/apply-for-TLS-certificate-using-acme/20220906_01_001.png" alt="DNS记录"></p><p>等待解析完成之后, 重新生成证书:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --renew -d 三级域名.mydomain.com --keylength ec-256 --<span class="built_in">log</span> \</span><br><span class="line">  --yes-I-know-dns-manual-mode-enough-go-ahead-please</span><br></pre></td></tr></table></figure><p>注意第二次和第一次不同的地方，这里用的是<code>--renew</code>。</p><p>这里再解释一下用到的几个参数：</p><ol><li><code>--log</code>：这个是用来打印日志的，如果有报错可以看到</li><li><code>--keylength</code>：这个用来指定证书类型，这里我们使用ECC证书，当然你可以使用RSA证书，按需选择</li></ol><p>如果担心自己操作有问题怎么办？可以直接在命令中加入测试的参数<code>--issue --test</code>来验证是否可以成功申请，这样可以避免在本地配置有误时，反复申请证书失败，超过 <code>Let's Encrypt</code> 的频率上限（比如，每小时、每个域名、每个用户失败最多 5 次），导致后面的步骤无法进行。如果出现问题可以再加上<code>--debug</code>参数，查看详细的申请过程和具体的错误。</p><h4 id="DNS-API自动申请">DNS API自动申请</h4><p>DNS 方式的真正强大之处在于可以使用域名解析商提供的 API 自动添加 txt 记录完成验证。<code>acme.sh</code> 目前支持 cloudflare，dnspod，cloudxns，godaddy 以及 ovh 等数十种解析商的自动集成。</p><p>以 dnspod 为例, 你需要先用 dnspod 账号登录到<a href="https://developer.godaddy.com/keys">开发者平台</a>，点击生成API Key按钮<br><img src="https://images.fanschou.com/blog/apply-for-TLS-certificate-using-acme/20220906_01_002.png" alt="创建API Key"></p><p>选择生产环境，直接下一步，生成你的 API id 和 API Key。<br><img src="https://images.fanschou.com/blog/apply-for-TLS-certificate-using-acme/20220906_01_003.png" alt="生成API Key"></p><p>然后设置环境变量，使用刚刚申请的 API id 和 API Key，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> DP_Id=<span class="string">&quot;yourapiid&quot;</span></span><br><span class="line"><span class="built_in">export</span> DP_Key=<span class="string">&quot;youapikey&quot;</span></span><br><span class="line">acme.sh --issue --dns dns_gd -d 三级域名.mydomain.com --keylength ec-256 --<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>证书就会自动生成了。这里给出的 API id 和 API Key 会被自动记录下来，将来你在使用 dnspod API 的时候，就不需要再次指定了。直接生成就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh  --issue   -d  三级域名.mydomain.com   --dns  dns_dp</span><br></pre></td></tr></table></figure><p>可以查看官方<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">更详细的 API 用法</a></p><h2 id="安装证书">安装证书</h2><p>前面申请完的证书其实都是在<code>~/.acme.sh/</code>中的，一般我们的证书会用在别的地方，这个时候通过<code>acme.sh</code>的命令可以直接将证书安装到目标位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d 三级域名.mydomain.com \</span><br><span class="line">--cert-file      /path/to/certfile/in/apache/cert.pem  \</span><br><span class="line">--key-file       /path/to/keyfile/in/apache/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \</span><br><span class="line">--reloadcmd     <span class="string">&quot;service nginx force-reload&quot;</span></span><br></pre></td></tr></table></figure><p><code>--install-cert</code>命令可以携带很多参数，来指定目标文件。并且可以指定 <code>reloadcmd</code>，当证书更新以后，<code>reloadcmd</code>会被自动调用，让服务器生效。</p><p>值得注意的是，这里指定的所有参数都会被自动记录下来，并在将来证书自动更新以后，被再次自动调用。</p><h2 id="查看已安装证书信息">查看已安装证书信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --info -d 三级域名.mydomain.com</span><br></pre></td></tr></table></figure><h2 id="更新证书">更新证书</h2><p>目前证书在 60 天以后会自动更新，你无需任何操作。注意，如果你是通过前面说的手动设置DNS记录的方式申请的证书，那么不会进行自动更新。</p><p>请确保 cronjob 正确安装，看起来是类似这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crontab  -l</span><br><span class="line">56 * * * * <span class="string">&quot;/root/.acme.sh&quot;</span>/acme.sh --cron --home <span class="string">&quot;/root/.acme.sh&quot;</span> &gt; /dev/null</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了如何使用acme申请TLS证书，并将TLS证书安装到指定的目录下</summary>
    
    
    
    <category term="devops" scheme="https://www.fanschou.com/categories/devops/"/>
    
    
    <category term="tls" scheme="https://www.fanschou.com/tags/tls/"/>
    
  </entry>
  
  <entry>
    <title>macOS下Launchd的介绍和使用</title>
    <link href="https://www.fanschou.com/env/tutorial-of-launchd-in-macos/"/>
    <id>https://www.fanschou.com/env/tutorial-of-launchd-in-macos/</id>
    <published>2022-08-19T05:14:52.000Z</published>
    <updated>2022-08-19T05:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 上如果想后台运行一个服务，或者想定时运行某些脚本有很多的选择，比如使用Systemd或者用crontab也可以，而我手头用的系统是macOS，最近需要在本机后台运行一些脚本，在网上搜了一下，macOS有一个类似的叫 Launchd 的系统，对应使用<code>launchctl</code>命令控制，可以达到类似的效果。</p><h2 id="Daemons-and-Agents">Daemons and Agents</h2><p>Launchd 管理 Daemons 和 Agents 两种类型的任务，配置文件分别存放在不同的文件夹下，两类任务主要的区别是：</p><ol><li>Agents 是用户登录后执行的</li><li>Daemons 是开机后就执行，可以通过<code>UserName</code>指定用户比如<code>root</code>用户</li></ol><h2 id="配置文件">配置文件</h2><p>Launchd 配置文件以<code>.plist</code>结尾，本质上是<code>xml</code>格式的文件，Daemons 和 Agents 各自存放的路径也不同，具体如下表：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">路径</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">User Agents</td><td style="text-align:left">~/Library/LaunchAgents</td><td style="text-align:left">用户 Agents 当前用户登录时运行</td></tr><tr><td style="text-align:left">Global Agents</td><td style="text-align:left">/Library/LaunchAgents</td><td style="text-align:left">全局 Agents 任何用户登录时都会运行</td></tr><tr><td style="text-align:left">Global Daemons</td><td style="text-align:left">/System/Library/LaunchAgents</td><td style="text-align:left">系统 Agents 任何用户登录时都会运行</td></tr><tr><td style="text-align:left">System Agents</td><td style="text-align:left">/Library/LaunchDaemons</td><td style="text-align:left">全局 Daemons 内核初始化加载完后就运行</td></tr><tr><td style="text-align:left">System Daemons</td><td style="text-align:left">/System/Library/LaunchDaemons</td><td style="text-align:left">系统 Daemons 内核初始化加载完后就运行</td></tr></tbody></table><h3 id="文件格式">文件格式</h3><p>一般配置文件名都以<code>com.domain.programName.plist</code>格式命名，不管是 Daemons 还是 Agents ，它们的配置文件格式都是一样的，只是存放位置不同。看下面一个 hello world 的例子 <code>~/Library/LaunchAgents/com.example.helloword.plist</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.fanschou.helloword<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/fanschou/logs/stdout.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/echo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以发现其实就是一个xml格式的文件，除了包裹着整体的<code>plist</code>和<code>dict</code>之外，内部基本就是一个<code>key</code>对应一个这个<code>key</code>具体的值，这个值可以是<code>string</code>也可以是一个<code>array</code>数组。<br>上面的样例定义了一个最简单的任务，只使用了<code>Label</code>和<code>ProgramAgruments</code>两个键：</p><ul><li><code>Label</code>这是个必须的键，指定这个任务名</li><li><code>ProgramArguments</code>是带参数的可执行文件或者脚本，上面等同于运行<code>/bin/echo hello world</code>命令，如果执行的程序不带参数可以使用<code>Program</code>键，但一个任务中必须包含这两个中的其中一个键</li></ul><p>还有一些常用的键名，所有的键可通过<code>man 5 launchd.plist</code>查看或者参考<a href="https://www.launchd.info/">这里</a></p><table><thead><tr><th style="text-align:left">key</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">Disabled</td><td style="text-align:left">是否不生效（launchd 忽略，不执行）</td></tr><tr><td style="text-align:left">EnvironmentVariables</td><td style="text-align:left">设置运行环境变量</td></tr><tr><td style="text-align:left">GroupName</td><td style="text-align:left">启动进程的用户组。只在 Daemons 可用</td></tr><tr><td style="text-align:left">KeepAlive</td><td style="text-align:left">是否设置程序是一直存活着，如果退出就重启</td></tr><tr><td style="text-align:left">ProcessType</td><td style="text-align:left">进程类型</td></tr><tr><td style="text-align:left">RunAtLoad</td><td style="text-align:left">是否再加载的时候就运行</td></tr><tr><td style="text-align:left">StandardOutPath</td><td style="text-align:left">标准输出到文件</td></tr><tr><td style="text-align:left">StandardErrorPath</td><td style="text-align:left">标准错误到文件</td></tr><tr><td style="text-align:left">StartInterval</td><td style="text-align:left">设置程序每隔多少秒运行一次</td></tr><tr><td style="text-align:left">StartCalendarInterval</td><td style="text-align:left">设置程序具体运行时间，类似cron表达式</td></tr><tr><td style="text-align:left">UserName</td><td style="text-align:left">设置用户名只在 Daemons 可用</td></tr><tr><td style="text-align:left">WorkingDirectory</td><td style="text-align:left">设置工作目录</td></tr></tbody></table><p>利用这些key，这里给出一个完整一点模板参考：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple Computer//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.fanschou.macos.helloword<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>Disabled<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProcessType<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/echo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>UserName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>root<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>GroupName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>wheel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/fanschou/logs/stderr.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardOutPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/fanschou/logs/stdout.log<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>/Users/fanschou/dev/script<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每隔60s运行一次，与下面的不可同时设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">integer</span>&gt;</span>60<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 每天10点半运行一次，与上面的不可同时设置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>StartCalendarInterval<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">integer</span>&gt;</span>30<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">integer</span>&gt;</span>10<span class="tag">&lt;/<span class="name">integer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>EnvironmentVariables<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置PATH，用于找不到命令的时候--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>PATH<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>&lt;![CDATA[/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置网络代理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>http_proxy<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>&lt;![CDATA[http://127.0.0.1:1080]]&gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试文件格式是否正确">测试文件格式是否正确</h3><p>写完<code>.plist</code>文件之后，可以通过<code>plutil</code>命令测试一下文件格式有没有问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plutil ~/Library/LaunchAgents/com.fanschou.helloword.plist</span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/fanschou/Library/LaunchAgents/com.fanschou.helloword.plist: OK</span><br></pre></td></tr></table></figure><h2 id="操作">操作</h2><p>现在我们就加载和运行一个任务，上面定义了<code>~/Library/LaunchAgents/com.fanschou.helloword.plist</code>，配置中把标准输出重定向到了<code>/Users/fanschou/logs/stdout.log</code>，我们运行测试下。</p><h3 id="加载任务">加载任务</h3><p>第一步需要进行<strong>加载(load)</strong>，使用<code>launchctl load &lt;path&gt;</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl load -w ~/Library/LaunchAgents/com.fanschou.helloword.plist</span><br></pre></td></tr></table></figure><p>这里注意，<code>launchctl load &lt;path&gt;</code>只会加载没有被<strong>disable</strong>的任务，可以加<code>-w</code>参数 <code>launchctl load -w &lt;path&gt;</code>覆盖。</p><h3 id="启动任务">启动任务</h3><p>然后手动<strong>启动(start)</strong> 任务，如果配置中设置了<code>RunAtLoad</code>或者<code>KeepAlive</code>为<code>true</code>，则在<code>launchctl load</code>时就会启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">launchctl start ~/Library/LaunchAgents/com.fanschou.helloword.plist</span><br></pre></td></tr></table></figure><p>我们查看<code>/Users/fanschou/logs/stdout.log</code>会有日志输出。因为这是一个一次性任务，所以正常运行完就会退出，如果是运行一些服务的话，就会以一个守护进程的模式一直运行，直到手动停止，或者报错退出。</p><h3 id="管理任务">管理任务</h3><p>使用<code>launchctl list</code>列出当前加载的任务，第一列代表进程ID，因为上面的helloword程序运行一次就退出了所以显示<code>-</code>，运行中的则显示进程ID；第二列是程序上次运行退出的code，<code>0</code>代表正常退出，如果是正数代表退出的时候是有错误的，负数代表是接收到信号被终止的</p><h3 id="退出任务">退出任务</h3><p>当不想运行任务时，可以通过命令<code>launchctl stop &lt;service_name&gt;</code>指定服务名终止服务，或者通过<code>launchctl stop &lt;path&gt;</code>指定路径进行终止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">launchctl stop com.fanschou.helloword</span><br><span class="line">launchctl stop ~/Library/LaunchAgents/com.fanschou.helloword.plist</span><br></pre></td></tr></table></figure><h3 id="卸载任务">卸载任务</h3><p>如果不想再使用任务了的话，也可以直接将任务卸载掉，可以通过命令<code>launchctl unload &lt;path&gt;</code>指定路径卸载一个任务，或者通过<code>launchctl remove &lt;service_name&gt;</code>指定服务名卸载任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">launchctl remove com.fanschou.helloword</span><br><span class="line">launchctl unload ~/Library/LaunchAgents/com.fanschou.helloword.plist</span><br></pre></td></tr></table></figure><p><code>launchctl unload &lt;path&gt;</code>只会停止和卸载这个任务，但下次启动还会加载，与加载任务的命令一样，可以使用<code>-w</code>参数<code>launchctl unload -w &lt;path&gt;</code>停止任务，下次启动也不会起来，也就是相当于标记了<strong>disable</strong></p><h3 id="调试任务">调试任务</h3><p>如果任务跑不起来的话，可以先尝试使用<code>plutil</code>命令检查语法，然后设置<code>StandardOutPath</code>、<code>StandardErrorPath</code>、<code>Debug</code>键，查看具体输出的日志进行调试。</p>]]></content>
    
    
    <summary type="html">本文介绍了macOS下Launchd的介绍和使用</summary>
    
    
    
    <category term="dev-env" scheme="https://www.fanschou.com/categories/dev-env/"/>
    
    
    <category term="macOS" scheme="https://www.fanschou.com/tags/macOS/"/>
    
    <category term="shell" scheme="https://www.fanschou.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>排序算法系列之插入排序</title>
    <link href="https://www.fanschou.com/algorithm/algorithm-insertion-sort/"/>
    <id>https://www.fanschou.com/algorithm/algorithm-insertion-sort/</id>
    <published>2022-05-18T05:14:52.000Z</published>
    <updated>2022-05-18T05:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。举例来说的话，很像我们学生时代，第一次做课间操排队的情况，按身高一个个往队伍里面安排，最后每个做操的队列就是严格按身高递增的。今天我们还是从算法本身、时间复杂度以及稳定性方面来看看插入排序，并且思考一下能做怎样的优化。</p><blockquote><p>如果没有了解过诸如复杂度、稳定性等相关算法相关的概念，可以先去看看<a href="https://www.fanschou.com/algorithm/algorithm-sort-opening/">排序算法系列之开篇</a>，里面有大概的介绍。</p></blockquote><h2 id="排序思想">排序思想</h2><p>传统插入排序的工作原理是通过逐步构建有序序列，最终完成整个序列的排布。对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用就地排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h2 id="排序过程">排序过程</h2><p>假设现在有一个待排序的队列：[16, 24, 7, 43, 32, 11, 15, 30, 28, 38]，我们按下面的排序过程进行排序：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序队列中的）大于新元素，将该元素移到下一位置</li><li>重复步骤③，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤②~⑤</li></ol><p>下面我们完整的看一遍动画演示<br><img src="https://images.fanschou.com/blog/algorithm-insertion-sort/20220518_01_001.gif" alt="插入排序完整动画"></p><h2 id="代码实现">代码实现</h2><p>了解了插入排序的整个排序过程，我们用代码将它实现一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionSort</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left, j = i; i &lt; right; j = ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ai</span> <span class="operator">=</span> arr[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (ai &lt; arr[j]) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                <span class="keyword">if</span> (j-- == left) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = ai;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能分析">性能分析</h3><p>分析一下上面实现的复杂度：</p><ul><li>平均时间复杂度：O(n²)</li><li>最差时间复杂度：O(n²)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li></ul><p>如果插入排序的目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况：</p><ul><li>最好情况：序列已经是升序排列，在这种情况下，需要进行的比较操作需(n-1)次即可。</li><li>最坏情况：序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。<br>插入排序的赋值操作是比较操作的次数减去(n-1)次。平均来说插入排序算法复杂度为O(n²)。</li></ul><p>最优的空间复杂度为开始元素已排序，则空间复杂度为 0；<br>最差的空间复杂度为开始元素为逆排序，则空间复杂度最坏时为 O(N);<br>平均的空间复杂度为O(1)</p><h3 id="代码优化">代码优化</h3><p>我们仔细观察排序的过程，可以发现直接插入排序每次往前插入时，是按顺序依次往前查找，数据量较大时，必然比较耗时，效率低。我们可以采取二分查找的方式去定位要插入的位置，然后进行插入，也就是所谓的<strong>折半插入</strong>。</p><p>二分插入排序相对直接插入排序而言：平均性能更快，时间复杂度降至O(NlogN)，排序是稳定的，但排序的比较次数与初始序列无关，相比直接插入排序，在速度上有一定提升。逻辑步骤如下：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中二分查找到第一个比它大的数的位置</li><li>将新元素插入到该位置后</li><li>重复上述两步</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">binaryInsertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left;</span><br><span class="line">    <span class="type">int</span> right;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i - left &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.arraycopy(arr, left, arr, left + <span class="number">1</span>, i - left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[left] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>插入排序的总体思路是将未排序的元素往已排序的队列中插入，不可避免的涉及到元素的移动，所以一般不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，那么插入排序还是一个不错的选择。尤其当数据基本有序时，采用插入排序可以明显减少数据交换和数据移动次数，进而提升排序效率。 在Java的JDK工具类中，比如Arrays.sort的底层排序算法中，都将插入排序作为快速排序的补充，用于少量元素的排序。这部分后面也会进行详细的深入源码探究。</p><p>到这里，就介绍完了有关插入排序相关的一些知识，如果你发现文中有任何错误，欢迎通过<a href="https://www.fanschou.com/author/#%E5%85%B3%E4%BA%8E%E7%AB%99%E7%82%B9">关于站点</a>的联系方式进行反馈。</p>]]></content>
    
    
    <summary type="html">本篇文章介绍了常见的排序算法——插入排序的排序过程，聊一聊它的时间复杂度和稳定性，以及可以对它进行的一些优化。</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="sort" scheme="https://www.fanschou.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>蓄水池抽样算法——解决以相同概率抽取样本的问题</title>
    <link href="https://www.fanschou.com/algorithm/algorithm-reservoir-sampling/"/>
    <id>https://www.fanschou.com/algorithm/algorithm-reservoir-sampling/</id>
    <published>2022-05-12T05:14:52.000Z</published>
    <updated>2022-05-12T05:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题引入">问题引入</h2><p>我们在解决一些算法问题时，会遇到一种要求：在抽取样本时，保证每个样本被抽取的概率是一样的。通常这种情况下，给定样本的数量是确定的，那么我们可以对样本编号，然后在 [1, 样本数量] 之中随机一个数字，然后取这个数字对应编号的样本，就可以达到抽取概率一致的要求。</p><p>那么，我们考虑再复杂一点的情况，如果我们提前不知道样本总数，如何保证最后抽取的样本概率是一致的？这篇文章介绍的蓄水池抽样算法就可以解决这个问题。照例，还是选择一道leetcode的题目作为整个讲解的例子：<a href="https://leetcode.cn/problems/linked-list-random-node/">382. 链表随机节点</a></p><p>先来看看题目内容</p><blockquote><p>给你一个单链表，随机选择链表的一个节点，并返回相应的节点值。每个节点 被选中的概率一样 。<br>实现 Solution 类：<br><strong>·</strong> Solution(ListNode head) 使用整数数组初始化对象。<br><strong>·</strong> int getRandom() 从链表中随机选择一个节点并返回该节点的值。链表中所有节点被选中的概率相等。</p></blockquote><h2 id="已知样本总数的解决办法">已知样本总数的解决办法</h2><p>根据题目的提示，由于链表长度只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>，我们可以在初始化时把链表预处理到一个数组内，然后在查询时，随机在 [1, 数组大小] 的区间中抽取一个下标，再将数组中对应下标的内容返回。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">20220512</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Solution</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            list.add(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> random.nextInt(list.size());</span><br><span class="line">        <span class="keyword">return</span> list.get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式就是前面提到的已知样本总数情况的解法，可以很容易得到算法复杂度如下：</p><ul><li>时间复杂度：令 n 为链表长度，预处理数组的复杂度为 O(n)；随机获取某个值的复杂度为 O(1)</li><li>空间复杂度：O(n)</li></ul><p>如果没有所谓的 <strong>「题目的提示」</strong> ，只有一个链表的头节点，那么如何在一次遍历下就得到一个抽取概率相同的结果呢？</p><h2 id="蓄水池抽样">蓄水池抽样</h2><h3 id="执行过程">执行过程</h3><p>蓄水池抽样整体的过程如下：</p><ol><li>从前往后处理每个样本，假设处理到第 i 个（编号从 1 开始），对第 i 个样本进行一个等概率计算，这个概率为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>i</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，含义为在 [1, i] 这个区间内，第 i 个样本成为被选中答案的概率</li><li>如果上一步计算中，第 i 个样本被抽中为答案，记录下来</li><li>每个样本做第一步的操作，不同的是上面的等概率的大小是随着样本的位置而变小的，如果被抽中为答案就覆盖上一次的结果</li><li>直到遍历完所有样本，最后一个最终可以确保每个样本成为答案的概率均为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>（其中 n 为样本总数）</li></ol><p>为什么仅仅只是遍历一次链表，然后推移一下每个样本的抽取概率，就可以保证每个样本成为答案的概率都是均等的？下面就来推演一下。</p><h3 id="原理">原理</h3><p>假设最终成为答案的样本编号为 k（编号从 1 开始），那么 k 成为答案的充要条件为「在遍历到 k 时被选中」并且「遍历大于 k 的所有元素时，均没有被选择（没有覆盖）」。对应的概率如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo fence="true">)</mo></mrow><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow></mfrac><mo fence="true">)</mo></mrow><mo>×</mo><mo>⋯</mo><mo>×</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>−</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">P=\frac1k\times\left(1-\frac1{k+1}\right)\times\left(1-\frac1{k+2}\right)\times\dots\times\left(1-\frac1n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>首项 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>k</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 为选中 k 的概率，后面每项分别为编号为 [k + 1, n] 的样本 <strong>不被选中</strong> 的概率。</p><p>化简得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><mo>×</mo><mfrac><mi>k</mi><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>×</mo><mfrac><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>+</mo><mn>2</mn></mrow></mfrac><mo>×</mo><mo>⋯</mo><mo>×</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">P=\frac1k\times\frac k{k+1}\times\frac{k+1}{k+2}\times\dots\times\frac{n-1}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1408em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.1408em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>继续化简得：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">P=\frac1n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>对应到上面的步骤，计算 i 样本的概率相当于首项的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>k</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，如果答案不被覆盖，那么等于上面公式中首项后面的概率（遍历大于 k 的所有元素时，均没有被选择的概率）发生了，那么根据公式的化简结果，选择到样本的概率就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；如果答案被覆盖，那么选择到的最终答案也一定符合上面公式的计算，也同样符合等概率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的要求。</p><h3 id="代码实现">代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ListNode head;</span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">20220512</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Question0382</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        head = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">t</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (t != <span class="literal">null</span> &amp;&amp; ++idx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (random.nextInt(idx) == <span class="number">0</span>) &#123;</span><br><span class="line">                ans = t.val;</span><br><span class="line">            &#125;</span><br><span class="line">            t = t.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法的复杂度如下：</p><ul><li>时间复杂度：令 n 为链表长度，随机获取某个值的复杂度为 O(n)</li><li>空间复杂度：O(1)</li></ul><h2 id="最后">最后</h2><p>本篇文章介绍了蓄水池抽样算法，主要用来解决未知样本数量的情况下，以相同概率抽取样本的问题，从概率的角度推演了它是如何做到相同概率抽取的，希望可以帮助你解决其他相似的问题~~完结撒花🎉🎉🎉</p>]]></content>
    
    
    <summary type="html">本篇文章介绍了蓄水池抽样算法，是一种用来解决未知样本数量的情况下，以相同概率抽取样本的问题的算法</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="leetcode" scheme="https://www.fanschou.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>从一道字节算法面试题聊聊前缀和的运用</title>
    <link href="https://www.fanschou.com/algorithm/partial-sum-by-bytedance-interview/"/>
    <id>https://www.fanschou.com/algorithm/partial-sum-by-bytedance-interview/</id>
    <published>2022-04-28T06:36:11.000Z</published>
    <updated>2022-04-28T06:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近笔者在找工作，怀着忐忑的心情投了字节，想着也看看自己刷leetcode每日一题坚持的效果，哈哈哈~~~废话不多说，直接上题~</p><h2 id="题目：求连续子数组的最小长度">题目：求连续子数组的最小长度</h2><p>我拿到的题目大致的描述如下：</p><blockquote><p>给定一个整数数组 nums 和目标值 target ，求一个 nums 的连续子数组，使的连续子数组的和是 target 的倍数，并且子数组的长度最小<br>示例：nums=[23,2,4,6,7], tartget = 6，最小长度为 2</p></blockquote><p>当时写的时候，第一反应是如果不是求 target 的倍数，而是直接等于 target，貌似会简单点？结果就是想了3分钟，没有想通，面试官说可以先暴力解，然后想办法优化，于是我就先手撸了一个暴力解法，双层循环跑出了答案。接下来就是想了半天，也想到了前缀和，但是没搞通 target的倍数 这一关键点，时间到了之后，面试官就进下一环节了。这里也贴一下暴力解法吧，复杂度为O(n²)，可以对照后面的优化解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMinLength1</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minLength</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            sum = i != j ? sum + nums[j] : sum;</span><br><span class="line">            <span class="keyword">if</span>(sum % target == <span class="number">0</span>)&#123;</span><br><span class="line">                minLength = Math.min(minLength, j - i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minLength == Integer.MAX_VALUE ? - <span class="number">1</span> : minLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结束面试之后，我立马去leetcode上搜索题目，确实找到了相似的一道题，但是也不太一样，不过题解确实让我想到了思路，这里我贴一下相似的这道leetcode题：<a href="https://leetcode-cn.com/problems/continuous-subarray-sum/">523. 连续的子数组和</a>。</p><p>这道相似题的题解提供给我最大的提示就是：<code>前缀和</code> + <code>同余定理</code>。基于这两点，其实很容易就想到解决办法了。我先来说说什么是前缀和</p><h2 id="前缀和">前缀和</h2><p>前缀和是一种重要的预处理，能大大降低查询的时间复杂度。可以简单理解为“数列的前n项的和”。拿算法题的示例来说，nums 数组[23,2,4,6,7]，它对应到的前缀和数组 psum 是这么计算的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">psum[0]= nums[0] = 23</span><br><span class="line">psum[1]= psum[0] + nums[1] = 25</span><br><span class="line">psum[2]= psum[1] + nums[2] = 29</span><br><span class="line">psum[3]= psum[2] + nums[3] = 35</span><br><span class="line">psum[4]= psum[3] + nums[4] = 42</span><br></pre></td></tr></table></figure><p>此时前缀和有个重要的性质来了，就是它可以直接计算出原数组任意两个坐标之间的数值之和。我们还是以上面这个数组为例，当我们想计算下标0到2区间的数值和，直接使用<code>psum[2]-psum[0]</code>得到结果为 6，不需要任何额外累加的过程。<br>另外提一点，这里实际写代码的时候，还要注意像区间的开闭情况，还有边界值以及索引的编号从 0 还是 1 开始等等细节的地方。</p><h2 id="同余定理">同余定理</h2><p>严格来说，这个应该算是一个数学方面的小知识，也很容易理解。用一句话描述就是，<strong>给定一个正整数 m，如果两个整数 a 和 b 满足 a-b 能够被 m 整除，即 (a-b)/m 得到一个整数，那么就称整数 a 与 b 对模 m 同余，记作 a≡b(mod m)</strong>。引申来说，如果 a 对 m 取余，b 也对 m 取余，余数相同的情况下，a-b 是 m 的倍数。</p><p>写到这里，再结合前缀和，是不是可以发现这个倍数的性质，是可以解决题目当中的倍数问题的。</p><h2 id="解题思路">解题思路</h2><p>首先，我们计算出给定数组nums的前缀和数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    sum[i] += nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来创建一个哈希表，它的key是某个索引位置的前缀和元素对target取余的结果，value则存储索引位置。</p><p>然后遍历前缀和数组，拿到每一个前缀和的元素，对目标值target取余，并且把对应索引位置的取余结果通过哈希表存储起来。</p><p>这个时候就到了核心的部分了，计算完当前前缀和元素 a 对 target 取余的结果，然后从哈希表中找这个余数对应的value是否存在，如果存在，则说明存在之前的前缀和元素 b 与当前前缀和元素是<strong>同余</strong>（即余数相同）的。结合上面提到的同余定理，a 与 b 的差值一定是 <strong>target 的倍数</strong>，同时因为 a 与 b 是前缀和元素，结合前缀和的性质，那么他们的差值其实也就是它们对应索引位置之间<strong>连续子数组的和</strong>。</p><p>到此，所有逻辑都对上了题目中的要素：连续子数组与target的倍数。我们可以直接写出对应的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMinLength</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">minLength</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] sum = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum[i] += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> sum[i] % target;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(sum))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> map.get(sum);</span><br><span class="line">            minLength = Math.min(minLength, i - index);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(sum, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次深入分析一下代码，我们发现前缀和的计算过程，可以直接融合在对 target 取余的过程中，这样可以减少一次遍历，并且不用创建前缀和数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMinLength</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minLength</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum = (sum + nums[i]) % target;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sum))&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> map.get(sum);</span><br><span class="line">                minLength = Math.min(minLength, i - index);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(sum, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLength;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面这段代码的时间复杂度降低到了O(n)。</p><h2 id="写在最后">写在最后</h2><p>整道题下来，可以发现巧妙利用前缀和和同余定理，可以将时间复杂度降低一个数量级。在不断的刷题过程中，其实也接触了不少前缀和的题，但遇到这个题目之后，发现自己的运用还是不够娴熟，也不能很好的结合一些其他的解决方法。所以算法解题是一个不断锤炼自己的思考的过程中，刷题也需要不断沉淀，相同的题也需要不断的反复的去做，才能真正吸收掉它。</p><p>同时，写题解也是一个很好的方式，可以整理你的思路，更容易加深技巧的理解。坚持刷题前期也是一个很辛苦的事情，如果你因为某种原因需要刷题，那么一起坚持下去吧~最终一定会有收获！</p>]]></content>
    
    
    <summary type="html">最近面试字节碰到了一道算法题，当场没做出来，只给出了暴力解法，面试官显然是不满意的。结束面试后，重新审视了这道题，可以用一种更有效率的解法去做，本篇文章就让我和大家一起聊一聊吧~</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="interview" scheme="https://www.fanschou.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>聊聊并发中的死锁</title>
    <link href="https://www.fanschou.com/java/concurrent-deadlock/"/>
    <id>https://www.fanschou.com/java/concurrent-deadlock/</id>
    <published>2022-03-08T02:36:11.000Z</published>
    <updated>2022-03-08T02:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在高并发的情况中，经常需要考虑的一个问题就是线程之间的死锁问题，并且总结出了很多最佳实践，这篇文章我们就来聊聊导致死锁的原因，以及如何避免产生死锁。</p><h2 id="什么叫死锁">什么叫死锁</h2><p>死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会一直相互等待而无法继续运行下去。</p><h2 id="死锁的产生原因">死锁的产生原因</h2><p>那么，为什么会产生死锁呢？其实从死锁的现象中，我们就可以归纳出4条原因：</p><h3 id="互斥条件">互斥条件</h3><p>如果两个及以上的线程通过锁争夺同一个资源的使用权，说明该资源同时只能由一个线程占用，并且线程获取到它时进行排他性使用。如果此时还有其它线程请求获取获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</p><h3 id="请求并持有条件">请求并持有条件</h3><p>指一个线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其它线程占有，所以当前线程会被阻塞，但阻塞的同时并不释放自己已经获取的资源。</p><h3 id="不可剥夺条件">不可剥夺条件</h3><p>无外力作用的情况下，线程获取到的资源在自己使用完之前不能被其它线程抢占，只有在自己使用完毕后才由自己释放该资源。</p><h3 id="环路等待条件">环路等待条件</h3><p>指在发生死锁时，必然存在一个线程——资源的环形链，即线程集合 {T0，T1，T2,…… ，Tn} 中 T0 正在等待一 T1 占用的资源，Tl1正在等待 T2用的资源，…… Tn 在等待己被 T0占用的资源。</p><h2 id="如何解除死锁">如何解除死锁</h2><p>我们可以看到，只要破坏上面4个条件的任意一个，那么死锁自动就会解除。我们来逐一看一看4个条件。</p><h3 id="破坏互斥条件？">破坏互斥条件？</h3><p>互斥这个条件我们没有办法破坏，因为用锁为的就是互斥，如果没有互斥，那么死锁产生的根本就不存在了，没有锁如何死锁？</p><h3 id="破坏请求并持有条件">破坏请求并持有条件</h3><p>对于<code>请求并持有</code>这个条件，我们可以一次性请求所有的资源，这样就不会在一个线程获得部分资源之后，有其他线程切入，拿走另一部分资源的锁，也就破坏了请求并持有条件。</p><h3 id="破坏不可剥夺条件">破坏不可剥夺条件</h3><p>对于<code>不可剥夺</code>这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可剥夺这个条件就破坏掉了。<br>如果了解MySQL的话，它在产生死锁时，会剥夺掉一个连接所持有的锁，释放资源，达到解除死锁的目的。</p><h3 id="破坏环路等待条件">破坏环路等待条件</h3><p>对于<code>环路等待</code>这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。</p><h2 id="死锁如何排查">死锁如何排查</h2><p>可以使用jdk自带的命令行工具排查：</p><ol><li>使用jps查找运行的Java进程：jps -l</li><li>使用jstack查看线程堆栈信息：jstack -l 进程id</li></ol><p>基本就可以看到死锁的信息。</p>]]></content>
    
    
    <summary type="html">在高并发的情况中，经常需要考虑的一个问题就是线程之间的死锁问题，并且总结出了很多最佳实践，这篇文章我们就来聊聊导致死锁的原因，以及如何避免产生死锁。</summary>
    
    
    
    <category term="java" scheme="https://www.fanschou.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.fanschou.com/tags/java/"/>
    
    <category term="concurrent" scheme="https://www.fanschou.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>Java并发之synchronized关键字解析</title>
    <link href="https://www.fanschou.com/java/concurrent-synchronized/"/>
    <id>https://www.fanschou.com/java/concurrent-synchronized/</id>
    <published>2022-03-07T02:36:11.000Z</published>
    <updated>2022-03-07T02:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是synchronized">什么是synchronized</h2><p>synchronized是JVM提供的一个Java语言的关键字，主要用来实现Java代码的同步，保证多线程情况下代码的原子性。</p><h2 id="synchronized常见的使用方式">synchronized常见的使用方式</h2><p>synchronized按照修饰的对象，主要有三种用法：</p><h3 id="修饰实例方法">修饰实例方法</h3><p>对一个实例方法进行同步，作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰静态方法">修饰静态方法</h3><p>对一个类的静态方法进行同步，也就是给当前类加锁，会作⽤于类的所有对象实例 ，进⼊同步代码前要获得当前 class 的锁。因为静态成员不属于任何⼀个实例对象，是类成员（ static 表明这是该类的⼀个静态资源，不管 new 了多少个对象，只有⼀份）。</p><p>如果⼀个线程 A 调⽤⼀个实例对象的⾮静态 synchronized ⽅法，⽽线程 B 需要调⽤这个实例对象所属类的静态 synchronized ⽅法，是允许的，不会发⽣互斥现象，因为访问静态 synchronized ⽅法占⽤的锁是当前类的锁，⽽访问⾮静态 synchronized ⽅法占⽤的锁是当前实例对象锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> staic <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰代码块">修饰代码块</h3><p>对大括号内的代码块进行同步，在synchronized后面的括号中指定加锁对象，这里的加锁对象可以是一个实例对象(this|object)，此时需要获取这个实例对象的锁；也可以是一个类(类.class)，此时进入代码块时需要获取对应 class 的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="synchronized底层原理">synchronized底层原理</h2><p>由于synchronized是Java语言中提供的关键字，所以它不同于JUC包中的相关锁工具，它直接依赖于JVM的实现，所以需要从JVM层面去研究它的底层原理。</p><h3 id="synchronized是怎么加锁的">synchronized是怎么加锁的</h3><ul><li>修饰代码块</li></ul><p>synchronized修饰代码块时，JVM采用<code>monitorenter</code>、<code>monitorexit</code>两个指令来实现同步，<code>monitorenter</code>指令指向同步代码块的开始位置， <code>monitorexit</code>指令则指向同步代码块的结束位置。<br>反编译一段synchronized修饰代码块代码，<code>javap -c -s -v -l SynchronizedDemo.class</code>，可以看到相应的字节码指令。<br><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_001.png" alt="monitor"></p><ul><li>修饰实例方法</li></ul><p>synchronized修饰同步方法时，JVM采用<code>ACC_SYNCHRONIZED</code>标记符来实现同步，这个标识指明了该方法是一个同步方法。</p><p>同样可以写段代码反编译看一下。<br><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_002.png" alt="ACC_SYNCHRONIZED"></p><h3 id="synchronized锁住的是什么">synchronized锁住的是什么</h3><p><code>monitorenter</code>、<code>monitorexit</code>或者<code>ACC_SYNCHRONIZED</code>都是基于<code>Monitor</code>实现的。</p><p>所谓的Monitor其实是一种同步工具，也可以说是一种同步机制。在Java虚拟机（HotSpot）中，Monitor是由ObjectMonitor实现的，可以叫做内部锁，或者Monitor锁。</p><p>这段代码是关于ObjectMonitor的定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">// 记录线程获取锁的次数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;  <span class="comment">//锁的重入次数</span></span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;  <span class="comment">// 指向持有ObjectMonitor对象的线程</span></span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>;  <span class="comment">// 处于wait状态的线程，会被加入到_WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ;  <span class="comment">// 处于等待锁block状态的线程，会被加入到该列表</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectMonitor的工作原理：</p><ul><li>ObjectMonitor有两个队列：_WaitSet、_EntryList，用来保存ObjectWaiter 对象列表。</li><li>当多个线程同时访问某段同步代码时，首先会进入_EntryList集合</li><li>当线程获取到对象的monitor之后，就会进入_Owner 区域，并把 ObjectMonitor 对象的_Owner 指向为当前线程，并使_count + 1，如果调用了释放锁（比如 wait）的操作，就会释放当前持有的 monitor ，owner = null，_count - 1，同时这个线程会进入到_WaitSet 列表中等待被唤醒。</li><li>如果当前线程执行完毕后也会释放 monitor 锁，只不过此时不会进入_WaitSet 列表了，而是直接复位_count 的值。</li></ul><p><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_003.png" alt="ObjectMonitor的工作原理"></p><p>实例对象结构里有对象头，对象头里面有一块结构叫Mark Word，Mark Word指针指向了monitor。</p><p>关于Mark Word的结构，我们可以查到官方的说明如下：</p><p><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_004.png" alt="Mark Word的64位结构"><br><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_005.png" alt="Mark Word的32位结构"></p><p>可以看到Mark Word的结构在64位系统和32位系统下有细微区别，我们以32位的结构为例进行分析。</p><p><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_006.png" alt="Mark Word的32位结构"></p><h3 id="锁的优化">锁的优化</h3><p>在JDK1.6之前，synchronized的实现直接调用ObjectMonitor的enter和exit，这种锁被称之为<strong>重量级锁</strong>。从JDK6开始，HotSpot虚拟机开发团队对Java中的锁进行优化，如增加了适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁等优化策略，提升了synchronized的性能。</p><ul><li><p>偏向锁：在无竞争的情况下，只是在Mark Word里存储当前线程指针，CAS操作都不做。</p></li><li><p>轻量级锁：在没有多线程竞争时，相对重量级锁，减少操作系统互斥量带来的性能消耗。但是，如果存在锁竞争，除了互斥量本身开销，还额外有CAS操作的开销。</p></li><li><p>自旋锁：减少不必要的CPU上下文切换。在轻量级锁升级为重量级锁时，就使用了自旋加锁的方式</p></li><li><p>锁粗化：将多个连续的加锁、解锁操作连接在一起，扩展成一个范围更大的锁。</p></li><li><p>锁消除：虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。</p></li></ul><p>在上面提到的优化中，锁的逐步升级是最常被问到的问题，我们有必要详细的分析一下锁升级的整个过程。<br>锁的升级方向：无锁–&gt;偏向锁—&gt; 轻量级锁----&gt;重量级锁，这个方向基本上是不可逆的。</p><h4 id="偏向锁">偏向锁</h4><p>偏向锁的获取：</p><ol><li>判断是否为可偏向状态–MarkWord中锁标志是否为<code>01</code>，是否偏向锁是否为<code>1</code></li><li>如果是可偏向状态，则查看线程ID是否为当前线程，如果是，则进入<code>步骤5</code>，否则进入<code>步骤3</code></li><li>通过CAS操作竞争锁，如果竞争成功，则将MarkWord中线程ID设置为当前线程ID，然后执行<code>步骤5</code>；竞争失败，则执行<code>步骤4</code></li><li>CAS获取偏向锁失败表示有竞争。当达到safepoint时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块</li><li>执行同步代码</li></ol><p>偏向锁的撤销：</p><ol><li>偏向锁不会主动释放(撤销)，只有遇到其他线程竞争时才会执行撤销，由于撤销需要知道当前持有该偏向锁的线程栈状态，因此要等到safepoint时执行，此时持有该偏向锁的线程（T）有<code>步骤2</code>，<code>步骤3</code>两种情况；</li><li>撤销----T线程已经退出同步代码块，或者已经不再存活，则直接撤销偏向锁，变成无锁状态----该状态达到阈值20则执行批量重偏向</li><li>升级----T线程还在同步代码块中，则将T线程的偏向锁升级为轻量级锁，当前线程执行轻量级锁状态下的锁获取步骤----该状态达到阈值40则执行批量撤销</li></ol><p><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_007.png" alt="偏向锁升级流程"></p><h4 id="轻量级锁">轻量级锁</h4><p>轻量级锁的获取：</p><ol><li>进行加锁操作时，JVM会判断是否已经时重量级锁，如果不是，则会在当前线程栈帧中划出一块空间，作为该锁的锁记录，并且将锁对象MarkWord复制到该锁记录中</li><li>复制成功之后，JVM使用CAS操作将对象头MarkWord更新为指向锁记录的指针，并将锁记录里的owner指针指向对象头的MarkWord。如果成功，则执行<code>步骤3</code>，否则执行<code>步骤4</code></li><li>更新成功，则当前线程持有该对象锁，并且对象MarkWord锁标志设置为<code>00</code>，即表示此对象处于轻量级锁状态</li><li>更新失败，JVM先检查对象MarkWord是否指向当前线程栈帧中的锁记录，如果是则执行<code>步骤5</code>，否则执行<code>步骤4</code></li><li>表示锁重入；然后当前线程栈帧中增加一个锁记录第一部分（Displaced Mark Word）为null，并指向Mark Word的锁对象，起到一个重入计数器的作用。</li><li>表示该锁对象已经被其他线程抢占，则进行自旋等待（默认10次），等待次数达到阈值仍未获取到锁，则升级为重量级锁</li></ol><p><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_008.png" alt="轻量级锁升级流程"></p><h4 id="重量级锁">重量级锁</h4><p>再完整的看一遍到重量级锁的升级<br><img src="https://images.fanschou.com/blog/concurrent-synchronized/20220307_01_009.png" alt="重量级锁升级流程"></p><h4 id="几种锁状态的对比">几种锁状态的对比</h4><table><thead><tr><th>锁类型</th><th>适用场景</th><th>缺点</th><th>优点</th></tr></thead><tbody><tr><td>偏向锁</td><td>适用于只有一个线程访问的同步场景</td><td>如果存在多个线程竞争使用锁，会带来额外的锁撤销消耗</td><td>加锁和解锁消耗小</td></tr><tr><td>轻量级锁</td><td>适用于追求响应时间的应用场景</td><td>如果始终得不到资源，会自旋消耗CPU</td><td>提高程序响应速度</td></tr><tr><td>重量级锁</td><td>适用于追求吞吐量的应用场景</td><td>得不到锁的线程会阻塞，性能比较差</td><td>阻塞，不需要消耗CPU</td></tr></tbody></table><h3 id="synchronized怎么保证可见性">synchronized怎么保证可见性</h3><ul><li>线程加锁前，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值。</li><li>线程加锁后，其它线程无法获取主内存中的共享变量。</li><li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li></ul><h3 id="synchronized怎么保证有序性">synchronized怎么保证有序性</h3><p>synchronized同步的代码块，具有排他性，一次只能被一个线程拥有，所以synchronized保证同一时刻，代码是单线程执行的。<br>因为as-if-serial语义的存在，单线程的程序能保证最终结果是有序的，但是不保证不会指令重排。<br>所以synchronized保证的有序是<strong>执行结果的有序性</strong>，而不是防止<strong>指令重排的有序性</strong>。</p><h3 id="synchronized怎么实现可重入的呢">synchronized怎么实现可重入的呢</h3><p>synchronized 是可重入锁，也就是说，允许一个线程二次请求自己持有对象锁的临界资源，这种情况称为可重入锁。<br>synchronized 锁对象的时候有个计数器，他会记录下线程获取锁的次数，在执行完对应的代码块之后，计数器就会-1，直到计数器清零，就释放锁了。<br>之所以，是可重入的。是因为 synchronized 锁对象有个计数器，会随着线程获取锁后 +1 计数，当线程执行完毕后 -1，直到清零释放锁。</p><h2 id="synchronized与ReentrantLock的区别">synchronized与ReentrantLock的区别</h2><p>通过上面的介绍，可以发现synchronized与JUC中的Lock相关工具类具有一定的相似性，我们可以以ReentrantLock为例分析一下两者的区别。</p><ul><li><p><strong>锁的实现</strong>： synchronized是Java语言的关键字，基于JVM实现。而ReentrantLock是基于JDK的API层面实现的（一般是lock()和unlock()方法配合try/finally 语句块来完成。）</p></li><li><p><strong>性能</strong>： 在JDK1.6锁优化以前，synchronized的性能比ReenTrantLock差很多。但是JDK6开始，增加了适应性自旋、锁消除等，两者性能就差不多了。</p></li><li><p><strong>功能特点</strong>： ReentrantLock 比 synchronized 增加了一些高级功能，如等待可中断、可实现公平锁、可实现选择性通知。</p><ul><li><p>ReentrantLock提供了一种能够中断等待锁的线程的机制，通过lock.lockInterruptibly()来实现这个机制</p></li><li><p>ReentrantLock可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</p></li><li><p>synchronized与wait()和notify()/notifyAll()方法结合实现等待/通知机制，ReentrantLock类借助Condition接口与newCondition()方法实现。</p></li><li><p>ReentrantLock需要手工声明来加锁和释放锁，一般跟finally配合释放锁。而synchronized不用手动释放锁。</p></li></ul></li></ul><p>下面的表格列出出了两种锁之间的区别：</p><table><thead><tr><th>区别</th><th>synchronized</th><th>ReentrantLock</th></tr></thead><tbody><tr><td>锁实现机制</td><td>对象头监视器模式</td><td>依赖AQS</td></tr><tr><td>灵活性</td><td>不灵活</td><td>支持响应中断、超时、尝试获取锁</td></tr><tr><td>释放锁形式</td><td>自动释放锁</td><td>显式调用unlock方法</td></tr><tr><td>支持锁类型</td><td>非公平锁</td><td>公平锁&amp;非公平锁</td></tr><tr><td>条件队列</td><td>单条件队列</td><td>多个条件队列</td></tr><tr><td>可重入支持</td><td>支持</td><td>支持</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">Java中的synchronized关键字是高并发编程中常用的一个手段，也是找工作时的高频面试题，这篇文章对于synchronized的使用及原理，进行了深入的解析，说明了一些高频面试考点。</summary>
    
    
    
    <category term="java" scheme="https://www.fanschou.com/categories/java/"/>
    
    
    <category term="java" scheme="https://www.fanschou.com/tags/java/"/>
    
    <category term="concurrent" scheme="https://www.fanschou.com/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>排序算法系列之冒泡排序</title>
    <link href="https://www.fanschou.com/algorithm/algorithm-sort-bubble/"/>
    <id>https://www.fanschou.com/algorithm/algorithm-sort-bubble/</id>
    <published>2021-07-10T06:36:11.000Z</published>
    <updated>2021-07-10T06:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>冒泡排序是一个比较经典和简单的排序算法，经典和简单到如果有人让我随便写一个排序算法，我第一时间就会写冒泡排序🤣。今天我们从算法本身、时间复杂度以及稳定性方面来看看冒泡排序，并且思考一下能做怎样的优化。</p><h2 id="排序思想">排序思想</h2><p>对值的排序，抽象来看，其实做了两个步骤：<strong>比较</strong> 和 <strong>将值放在正确的位置</strong>。基于这两点，我们发现「比较」这个动作是所有排序算法都会做的，不同的排序算法之间，他们如何将值放在正确的位置几乎就是核心点。冒泡排序如何将值放在正确的位置呢？</p><p>首先，冒泡排序的名字就揭示了它的核心思想，就是像水中的鱼吐泡一样，慢慢冒泡上来。我们可以想象，鱼在水中吐泡时，越靠近鱼嘴的地方，泡泡越小，当靠近水面时，泡泡越大。我们借鉴这个思路，将一个待排序的队列中相邻的两个值依次比较，谁比较大，就将它交换到后面的一个位置，当一轮比较之后，我们会发现最大的值自然就会到最后面的位置。我们重复这个过程，每次都会将一个最大的值排到后面，直到最后整个待排序的队列变成有序的。就像冒泡一样，慢慢的把大的泡冒到水面上来。</p><p>说了这么多抽象的方法，我们接下来借助一个例子演示一下完整的排序过程。</p><h2 id="排序过程">排序过程</h2><p>假设现在有一个待排序的队列：[4, 5, 3, 1, 8, 7, 6, 9, 2]，我们开始第一轮冒泡，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_001.jpeg" alt="待排序队列"></p><p>首先比较第一对相邻的值[4, 5]，我们发现 5 比 4 大，并且位置也在 4 的后面，保持不动<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_002.jpeg" alt="第一次比较"></p><p>第二次比较[5, 3]，我们发现 5 比 3 大，5 的位置在 3 的前面，我们做一次交换，此时的队列变成了[4, 3, 5, 1, 8, 7, 6, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_003.jpeg" alt="第二次比较"></p><p>第三次比较[5, 1]，我们发现 5 比 1 大，5 的位置在 1 的前面，我们做一次交换，此时的队列变成了[4, 3, 1, 5, 8, 7, 6, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_004.jpeg" alt="第三次比较"></p><p>第四次比较[5, 8]，我们发现 8 比 5 大，5 的位置在 8 的前面，保持不动，此时的队列没有变化[4, 3, 1, 5, 8, 7, 6, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_005.jpeg" alt="第四次比较"></p><p>第五次比较[8, 7]，我们发现 8 比 7 大，8 的位置在 7 的前面，我们做一次交换，此时的队列变成了[4, 3, 1, 5, 7, 8, 6, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_006.jpeg" alt="第五次比较"></p><p>第六次比较[8, 6]，我们发现 8 比 6 大，8 的位置在 6 的前面，我们做一次交换，此时的队列变成了[4, 3, 1, 5, 7, 6, 8, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_007.jpeg" alt="第六次比较"></p><p>第七次比较[8, 9]，我们发现 9 比 8 大，8 的位置在 9 的前面，保持不动，此时的队列没有变化[4, 3, 1, 5, 7, 6, 8, 9, 2]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_008.jpeg" alt="第七次比较"></p><p>第八次比较[9, 2]，我们发现 9 比 2 大，9 的位置在 2 的前面，我们做一次交换，此时的队列变成了[4, 3, 1, 5, 7, 6, 8, 2, 9]<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_009.jpeg" alt="第八次比较"></p><p>此时我们发现，一轮冒泡比较已经结束，最大的数字 9 以及到了队列的最后，没有比 9 更大的「泡」了。<br>我们按照同样的思路进行第二轮冒泡，得到的结果为[3, 1, 4, 5, 6, 7, 2, 8, 9]，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_010.png" alt="第二轮比较"><br>进行第三轮冒泡，得到的结果为[1, 3, 4, 5, 6, 2, 7, 8, 9]，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_011.png" alt="第三轮比较"><br>进行第四轮冒泡，得到的结果为[1, 3, 4, 5, 2, 6, 7, 8, 9]，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_012.png" alt="第四轮比较"><br>进行第五轮冒泡，得到的结果为[1, 3, 4, 2, 5, 6, 7, 8, 9]，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_013.png" alt="第五轮比较"><br>进行第六轮冒泡，得到的结果为[1, 3, 2, 4, 5, 6, 7, 8, 9]，<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_014.png" alt="第六轮比较"><br>进行第七轮冒泡，得到的结果为[1, 2, 3, 4, 5, 6, 7, 8, 9]，此时队列已经完全有序，排序工作结束。<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_015.png" alt="第七轮比较"></p><p>下面我们完整的看一遍动画演示<br><img src="https://images.fanschou.com/blog/algorithm-sort-bubble/20210710_01_016.gif" alt="完整动画"></p><h2 id="代码实现">代码实现</h2><p>了解了冒泡排序的整个排序过程，我们用代码将它实现一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一次代码优化">第一次代码优化</h3><p>我们仔细观察排序的过程，可以发现一个规律，就是每进行完一轮冒泡，待排序队列的尾部区间会在原本有序的基础上多加一个数。例如，第三轮的中间结果是[1, 3, 4, 5, 6, 2, 7, 8, 9]，此时尾部的[7, 8, 9]是有序的，第四轮的中间结果是[1, 3, 4, 5, 2, 6, 7, 8, 9]，此时尾部的[6, 7, 8, 9]是有序的。也就是说，在第 n 轮，待排序的队列的尾部 <code>n - 1</code> 个元素已经是有序的了，那么这一轮我们可以不再对这一段进行比较和交换。所以我们可以对上面的代码做出第一次优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二次代码优化">第二次代码优化</h3><p>经过第一次的优化，我们减少了第二轮循环的次数，继续观察还有什么可以优化的地方。上面的代码，我们认定的是按这种办法全部循环完，则整个队列变得有序，那么有没有一种办法，在没有全部循环完毕，也可以判断出队列已经有序了呢？</p><p>我们看到循环最主要的目的是将值较大的元素放到后面，那么假如从开始的第一对到结尾的最后一对，相邻的元素之间都没有发生交换的操作，这意味着右边的元素总是大于等于左边的元素，此时的数组已经可以认为是有序的了，我们无需再对剩余的元素重复比较下去了。用这个办法，我们可以不用等待循环全部走完，提前终止循环的过程，我们再对代码做一次优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">       <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一趟下来是否发生位置交换</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">false</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码优化小结">代码优化小结</h3><p>上面我们对代码做了两次小的优化，简单总结一下就是两个方向：</p><ul><li>降低复杂度：我们通过发现细节，减少循环次数，后面我们可能还能遇到直接减少循环层级的，比如从3层循环降低到2层循环</li><li>剪枝：对于代码执行链路中的很多分支，如果明确不会发生，或者发生了也无意义，可以采取提前终止的办法，达到一个减去分支的目的，可以有效降低执行效率</li></ul><h2 id="聊聊冒泡的特性">聊聊冒泡的特性</h2><p>我在<a href="https://www.fanschou.com/algorithm/algorithm-sort-opening/">排序算法系列之开篇</a>谈到了一些术语，有一些是我们谈及算法时一定会讨论的，如复杂度等，下面我们就几个纬度简单聊聊冒泡的一些特性。</p><h3 id="复杂度">复杂度</h3><h4 id="时间复杂度">时间复杂度</h4><p>分析一下冒泡排序的时间复杂度，可以看到最消耗时间的就是中间的两层循环，循环次数分别是 <code>n</code> 和 <code>n - i - 1</code>，那总的循环次数就是 <code>n * (n - i - 1)</code>，把它展开就是 <code>n² - n * i - n</code>，其中最大的数量级是 n²，其他的项相比平方阶来说都是不在一个数量级的。所以冒泡排序的时间复杂度为O(n²)。</p><h4 id="空间复杂度">空间复杂度</h4><p>代码运行过程中，我们只用了一个变量去做中转，交换两个位置的值，所以空间复杂度是O(1)，是常量级的复杂度。</p><h3 id="排序的稳定性">排序的稳定性</h3><p>冒泡排序算法是一个稳定算法，因为在值相等时，元素的相对位置没有变化。核心的点在于 <code>if (arr[j + 1] &lt; arr[j])</code> 这个判断，是只有前值大于后值时才会交换，等于时是不会交换的。当然，这里的判断也可以加上等于，就变成了不稳定排序，不过这样改可以但没必要。</p><h3 id="排序使用的空间">排序使用的空间</h3><p>排序时直接对数组的值进行交换，没有使用多余的存储空间，所以这是一个原地排序</p><h2 id="结尾">结尾</h2><p>到这里，就介绍完了有关冒泡排序相关的一些知识，如果你发现文中有任何错误，欢迎通过<a href="https://www.fanschou.com/author/#%E5%85%B3%E4%BA%8E%E7%AB%99%E7%82%B9">关于站点</a>的联系方式进行反馈。</p>]]></content>
    
    
    <summary type="html">本篇文章介绍了常见的排序算法——冒泡排序的排序过程，聊一聊它的时间复杂度和稳定性，以及可以对它进行的一些优化。</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="sort" scheme="https://www.fanschou.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>排序算法系列之开篇</title>
    <link href="https://www.fanschou.com/algorithm/algorithm-sort-opening/"/>
    <id>https://www.fanschou.com/algorithm/algorithm-sort-opening/</id>
    <published>2021-07-03T06:36:11.000Z</published>
    <updated>2021-07-03T06:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>对数据排序可以说是我们编码过程中最常碰到的一种操作了，为此出现了很多不同的排序算法，各有各的特点。从本篇文章开始，会陆续介绍一些常用的排序算法。在开始整个系列之前，我希望先通过这个开篇，介绍一些关于排序算法的一些基本概念，方便读者阅读接下来的文章。</p><p>为了方便大家理解，我会尽量制作一些动图演示，每篇文章也会给出代码的实现，如有错漏，望各位读者可以给予指正。</p><h2 id="基本术语">基本术语</h2><h3 id="复杂度">复杂度</h3><p>一般对于算法的复杂度，我们都会从时间复杂度和空间复杂度两个角度去衡量，然而有时候，时间和空间是不可兼得的，我们需要针对具体的情境，在两者之间取得一种平衡。</p><p>在摩尔定律的加持之下，现代计算机硬件性能得到了极大提升，所以在一般情况下，我们会选择空间换时间的做法，来提高算法的运行效率，如果没有明确提及是哪种复杂度，一般都会默认是时间复杂度。</p><h4 id="时间复杂度">时间复杂度</h4><p>时间复杂度用来表示一个算法执行所消耗的时间。那么算法的执行时间如何衡量呢？最简单的办法就是将算法程序跑一遍得到它的运行时间，但是这样会有很多弊端，首先这种方式非常容易受运行环境的影响，机器性能和数据规模的不同都会造成影响，并且，很多时候仅仅只是提出了算法思路，真正的代码还没有实现，此时如何衡量时间复杂度呢？</p><p>因此，我们采用了一种更通用的表示方式：<strong>「 大O符号表示法 」</strong>，即 <code>T(n) = O(f(n))</code> ，也就是在 n 的规模下，算法的时间复杂度为 O(f(n)) 。</p><p>举一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">   j = i;</span><br><span class="line">   j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <strong>「大O符号表示法」</strong> ，这段代码的时间复杂度为：O(n)，为什么是 O(n) 呢？</p><p>我们可以看到这是一个循环，循环次数是 n ，当 n 的数量加大时，相应的，程序的执行时间也会增长，那么我们可以认为，这段代码的时间复杂度是随着循环次数的增加，而呈现出一种线性增长的态势。到这里我们看出 <strong>「 大O符号表示法 」</strong> 不是一种精确表示复杂度的计算方式，这里的 <strong>O</strong> 其实表示的是复杂度与某个基数公式的正比例关系，这个基数公式其实表达的是一种近似的数量级。</p><p>常见的时间复杂度量级有：</p><ul><li>常数阶O(1)</li><li>对数阶O(logN)</li><li>线性阶O(n)</li><li>线性对数阶O(nlogN)</li><li>平方阶O(n²)</li><li>立方阶O(n³)</li><li>K次方阶O(n^k)</li><li>指数阶(2^n)</li></ul><p>上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p><p>对于时间复杂度来说，一般比较关注平均时间复杂度和最差时间复杂度，一个表示一般情况下的时间复杂度，一个是表示极端情况下最慢的情况。</p><h4 id="空间复杂度">空间复杂度</h4><p>既然时间复杂度不是用来计算程序具体耗时的，那么同理我们也应该知道，空间复杂度也不是用来直接计算程序<strong>实际占用</strong>的空间的。</p><p>空间复杂度是对一个算法在运行过程中临时使用存储空间大小的一个量度，同样反映的是一个趋势。</p><p>我们来看一个交换变量的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将两个变量的值进行了交换，用到了一个新的变量 <code>temp</code> ，无论这个方法怎么被调用，始终也只会使用这一个变量的空间，那么它的空间复杂度就是O(1)，也就是常数级别的复杂度。</p><h3 id="排序的稳定性">排序的稳定性</h3><h4 id="稳定排序">稳定排序</h4><p>假设给定一个无序的列表，如果 a 原本在 b 的前面，且 a == b，排序之后 a 仍然在 b 的前面，我们称这种排序方式是一个稳定排序。<strong>「 稳定 」</strong> 指代的是元素相对顺序没有改变。</p><h4 id="不稳定排序">不稳定排序</h4><p>对比稳定排序，如果 a 原本在 b 的前面，且 a == b，排序之后 a 可能不在 b 的前面，我们称这种排序方式是一个不稳定排序。</p><h3 id="排序使用的空间">排序使用的空间</h3><p>从排序是否使用额外的空间，我们也可以分为两种。</p><h4 id="原地排序">原地排序</h4><p>原地排序就是指在排序过程中不申请多余的存储空间，只利用原来存储待排数据的存储空间进行比较和交换的排序方式。</p><h4 id="非原地排序">非原地排序</h4><p>对比原地排序，非原地排序则需要利用额外的数组来辅助排序。</p><h3 id="排序使用的空间位置">排序使用的空间位置</h3><p>从排序使用的空间来源，也可以分成两类</p><h4 id="内部排序">内部排序</h4><p>排序数据全部记录在内存中进行排序，这种属于内部排序。</p><h4 id="外部排序">外部排序</h4><p>如果因为排序的数据很大，内存空间一次不能容纳全部的排序记录，在排序过程中需要访问外存，这种就属于外部排序。</p><h2 id="排序类别">排序类别</h2><ul><li>比较排序<ul><li><a href="https://www.fanschou.com/algorithm/algorithm-sort-bubble/">冒泡排序</a></li><li>选择排序（Selection Sort）</li><li><a href="https://www.fanschou.com/algorithm/algorithm-insertion-sort/">插入排序</a></li><li>希尔排序（Shell Sort）</li><li>归并排序（Merge Sort）</li><li>快速排序（Quick Sort）</li></ul></li><li>桶排序（Bucket Sort）</li><li>计数排序（Counting Sort）</li><li>基数排序（Radix Sort）</li><li>堆排序（Heap Sort）</li></ul>]]></content>
    
    
    <summary type="html">本篇文章作为排序算法系列的开篇，主要做一个开篇明义的讲解，介绍了一些关于排序算法的基本术语，有一些概念也是学习任何算法都有益处的知识。同时有了这一篇文章的介绍，后续排序算法系列文章的展开也可以基于此省去一些常用知识的说明。</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="sort" scheme="https://www.fanschou.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>浅谈KMP算法</title>
    <link href="https://www.fanschou.com/algorithm/algorithm-string-search-kmp/"/>
    <id>https://www.fanschou.com/algorithm/algorithm-string-search-kmp/</id>
    <published>2021-05-29T02:36:11.000Z</published>
    <updated>2021-05-29T10:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>前段时间在leetcode刷到了一道题——<a href="https://leetcode-cn.com/problems/implement-strstr/description/">实现strStr函数</a>，大概意思是：给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 -1。功能相当于Java类库中 <code>String</code> 类的 <code>indexOf</code> 方法。</p><p>从官方题解中了解到本文题目中的KMP算法，解释的不是特别明白，于是自己去看了一些文章，觉得还是比较巧妙的，应该自己总结一下思路，下面直接开始。</p><h2 id="KMP的匹配思路">KMP的匹配思路</h2><h3 id="算法流程">算法流程</h3><p>我们先引入一个例子，有一个字符串 <code>haystack = &quot;BBC ABCDAB ABCDABCDABDE&quot;</code> ，我们要在它的内部找到一个字符串 <code>needle = &quot;ABCDABD&quot;</code> 的位置，为了描述方便，我们称字符串 <code>haystack</code> 为<strong>源字符串</strong>，称字符串 <code>needle</code> 为<strong>搜索词</strong>。</p><p>首先，<strong>源字符串</strong>的第一个字符与<strong>搜索词</strong>的第一个字符，进行比较。因为 B 与 A 不匹配，所以<strong>搜索词</strong>后移一位。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_001.png" alt="比较第一位"></p><p>因为第二个字符 B 与 A 不匹配，<strong>搜索词</strong>再往后移。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_002.png" alt="比较第二位"></p><p>就这样，直到<strong>源字符串</strong>有一个字符，与<strong>搜索词</strong>的第一个字符相同为止。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_003.png" alt="第一次匹配"></p><p>我们持续比较<strong>源字符串</strong>和<strong>搜索词</strong>的字符，直到<strong>源字符串</strong>有一个字符，与<strong>搜索词</strong>对应的字符不相同为止。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_004.png" alt="匹配失败"></p><p>这时，我们第一反应是和之前一样，依然往后移动一个字符，再从第一个字符开始，逐个往后比较。这样做也是可行的，但是效率比较差，因为有部分位置的字符已经比较过了，我们没有利用上之前已经比较过的结果。</p><p>那么怎么利用上呢？一个基本事实是，当空格与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，可以更大程度的后移，“跳过”已经比较过的字符，这样就提高了效率。</p><p>我们先假设有一张《部分匹配表》（Partial Match Table）。这张表是如何产生的，<a href="#%E9%83%A8%E5%88%86%E5%8C%B9%E9%85%8D%E8%A1%A8%E7%9A%84%E4%BA%A7%E7%94%9F">后面</a>再介绍，这里暂时先拿来用就可以了。这张表的内容如下：</p><table><thead><tr><th style="text-align:center">搜索词</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">部分匹配值</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr></tbody></table><p>已知空格与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的<code>部分匹配值</code>为2，因此按照下面的公式算出向后移动的位数：</p><blockquote><p>移动位数 = 已匹配的字符数 - 对应的部分匹配值</p></blockquote><p>计算移动位数 = 6 - 2，得到4，所以将<strong>搜索词</strong>向后移动4位。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_005.png" alt="移位"></p><p>因为空格与Ｃ不匹配，<strong>搜索词</strong>还要继续往后移。这时，已匹配的字符数为2（“AB”），对应的<code>部分匹配值</code>为0。所以，移动位数 = 2 - 0，结果为 2，于是将<strong>搜索词</strong>向后移2位。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_006.png" alt="移位"></p><p>因为空格与A不匹配，<strong>搜索词</strong>继续后移一位。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_007.png" alt="移位"></p><p>逐位比较，直到发现C与D不匹配。这时，已匹配的字符数为6（“ABCDAB”），对应的<code>部分匹配值</code>为2。于是，移动位数 = 6 - 2，继续将<strong>搜索词</strong>向后移动4位。</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_008.png" alt="移位"></p><p>逐位比较，直到<strong>搜索词</strong>的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数 = 7 - 0，再将<strong>搜索词</strong>向后移动7位，这里就不再重复了。</p><h3 id="部分匹配表的产生">部分匹配表的产生</h3><p>下面开始介绍上面的部分匹配表如何产生的，首先我们先来理解两个概念：<code>前缀</code>和<code>后缀</code>。</p><ul><li><strong>前缀</strong>：指除了最后一个字符以外，一个字符串的全部头部组合。以上面的搜索词为例，就是[A,AB,ABC,ABCD,ABCDA,ABCDAB]</li><li><strong>后缀</strong>：指除了第一个字符以外，一个字符串的全部尾部组合。以上面的搜索词为例，就是[BCDABD,CDABD,DABD,ABD,BD,D]</li></ul><table><thead><tr><th style="text-align:center">搜索词</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:center">部分匹配值</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td></tr></tbody></table><p>我们再来看上面那张部分匹配表，<code>部分匹配值</code>就是<code>前缀</code>和<code>后缀</code>的最长的共有元素的长度。如何理解呢？我们还是以上面的搜索词为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- &quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；</span><br><span class="line">- &quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；</span><br><span class="line">- &quot;ABC&quot;的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；</span><br><span class="line">- &quot;ABCD&quot;的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；</span><br><span class="line">- &quot;ABCDA&quot;的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&quot;A&quot;，长度为1；</span><br><span class="line">- &quot;ABCDAB&quot;的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&quot;AB&quot;，长度为2；</span><br><span class="line">- &quot;ABCDABD&quot;的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。</span><br></pre></td></tr></table></figure><p>我们可以看出，以搜索词的开头到当前字符作为一个子串，然后以这个子串的<code>前缀</code>和<code>后缀</code>的最长的共有元素的长度作为当前位置的部分匹配值。</p><p>那么，为什么可以利用部分匹配值跳过一串已匹配的字符串呢？其实，&quot;部分匹配&quot;的实质是，有时候，搜索词头部和尾部会有重复。比如，“ABCDAB&quot;之中有两个&quot;AB”，那么它的<code>部分匹配值</code>就是2（&quot;AB&quot;的长度）。<strong>搜索词</strong>移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配值），就可以来到第二个&quot;AB&quot;的位置，此时，我们可以保证至少在前两个字符内，<strong>源字符串</strong>和<strong>搜索词</strong>是匹配的，跳过了一些根本不可能匹配上的字符。</p><h3 id="动图展示">动图展示</h3><p>下面我们通过一张动图展示整个过程</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_010.gif" alt="动图展示"></p><h3 id="代码实现">代码实现</h3><p>经过上面的分析，我们再来应用KMP算法来实现一下<a href="#%E5%BC%95%E8%A8%80">引言</a>中提到的 <code>strStr</code> 函数。基本思路就是先使用<strong>搜索词</strong>生成一个部分匹配表，然后依据这个部分匹配表进行搜索，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(needle.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> needle.length();</span><br><span class="line">    <span class="type">int</span>[] pmt = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; needle.charAt(i) != needle.charAt(j))&#123;</span><br><span class="line">            j = pmt[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(needle.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pmt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; h; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;</span><br><span class="line">            j = pmt[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haystack.charAt(i) == needle.charAt(j))&#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - n + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾">结尾</h2><p>依据KMP算法实现并提交代码之后，leetcode很快就执行通过了，看到执行时间，想着KMP算法还是比较精妙的嘛。此时，我突然想起来我刚开始刷leetcode的时候，是按题序刷的（刷过的应该知道，题目难度是忽上忽下），刷过这道题并且实现也比较粗暴，是直接调用Java类库String的indexOf方法解决的，于是我打开了提交记录，</p><p><img src="https://images.fanschou.com/blog/algorithm-string-search-KMP/20210529_01_009.png" alt="leetcode提交记录"></p><p>我很惊奇，因为上次提交的比这次还要快。我就升起了好奇心，JDK源码究竟是如何实现的呢？于是乎，我点开了JDK的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">char</span>[] source, <span class="type">int</span> sourceOffset, <span class="type">int</span> sourceCount,</span></span><br><span class="line"><span class="params">        <span class="type">char</span>[] target, <span class="type">int</span> targetOffset, <span class="type">int</span> targetCount,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> fromIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &gt;= sourceCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> (targetCount == <span class="number">0</span> ? sourceCount : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> <span class="variable">first</span> <span class="operator">=</span> target[targetOffset];</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> sourceOffset + (sourceCount - targetCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sourceOffset + fromIndex; i &lt;= max; i++) &#123;</span><br><span class="line">        <span class="comment">/* Look for first character. */</span></span><br><span class="line">        <span class="keyword">if</span> (source[i] != first) &#123;</span><br><span class="line">            <span class="keyword">while</span> (++i &lt;= max &amp;&amp; source[i] != first);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Found first character, now look at the rest of v2 */</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= max) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j + targetCount - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> targetOffset + <span class="number">1</span>; j &lt; end &amp;&amp; source[j]</span><br><span class="line">                    == target[k]; j++, k++);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j == end) &#123;</span><br><span class="line">                <span class="comment">/* Found whole string. */</span></span><br><span class="line">                <span class="keyword">return</span> i - sourceOffset;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯……暴力循环，果然，功夫再高，也怕菜刀:)</p>]]></content>
    
    
    <summary type="html">Knuth-Morris-Pratt 字符串查找算法（简称为KMP算法）可在一个字符串 S 内查找一个词 W 的出现位置。本文介绍了KMP算法的主要的匹配流程和实现原理，以及它的Java代码实现，并与 JDK 中的 indexOf 方法简单对比了一下。</summary>
    
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/categories/algorithm/"/>
    
    
    <category term="algorithm" scheme="https://www.fanschou.com/tags/algorithm/"/>
    
    <category term="leetcode" scheme="https://www.fanschou.com/tags/leetcode/"/>
    
    <category term="string-search" scheme="https://www.fanschou.com/tags/string-search/"/>
    
  </entry>
  
  <entry>
    <title>kafka安装配置</title>
    <link href="https://www.fanschou.com/env/kafka-install-steps/"/>
    <id>https://www.fanschou.com/env/kafka-install-steps/</id>
    <published>2018-09-25T06:26:11.000Z</published>
    <updated>2020-05-11T10:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><ul><li>安装资料下载<ul><li>kafka安装包，来自<a href="http://kafka.apache.org/downloads">kafka官方下载</a>，可以自行选择版本<br><img src="https://images.fanschou.com/blog/kafka-install-steps/20180424_01_001.png" alt="kafka官方下载"></li></ul></li></ul><h2 id="开始安装">开始安装</h2><p>以下安装是在Windows系统下执行，Linux系统类似的做调整即可</p><h3 id="配置修改">配置修改</h3><ul><li>解压缩下载的安装包到本地，开始修改配置<ul><li><code>server.properties</code>在根目录的config文件夹下<br>log.dirs=修改为你所使用系统的路径<br>例如Windows下：D:/Dependency/kafka_2.12-1.1.0/logs/kafka-logs</li><li><code>zookeeper.properties</code>在根目录的config文件夹下<br>dataDir=修改为你所使用系统的路径<br>例如Windows下：D:/Dependency/kafka_2.12-1.1.0/logs/zookeeper-logs</li></ul></li><li>以上修改的两个文件主要是可能会引起启动问题的配置，至于端口等设置可随意调整，此处选择默认端口号即可</li></ul><h3 id="启动文件修改">启动文件修改</h3><ul><li>在根目录下找到bin/windows文件夹，用文本编辑器修改<code>kafka-run-class.bat</code>文件<br><img src="https://images.fanschou.com/blog/kafka-install-steps/20180424_01_002.png" alt="kafka-run-class"><br>我从官网下载的是编译好的安装包，在这个文件里留有一些问题，由于安装包已经编译好，其实上面对文件夹很多的扫描是没有必要的，我在安装之后的启动过程中报了一下找不到主类的错误，琢磨了很久，将上面对一些无效文件夹的扫描全部删除掉，遂解决了报错的问题。但我不能完全确定是否是因为这个导致报错，如果有出现类似的错误，可以试着操作一下。<br>另外一个问题就是，Windows下的环境变量配置的时候，有些目录是带有空格的，这个也会导致报错，典型的就是如果JDK安装在C盘的Program Files下时的JAVA_HOME配置<br><img src="https://images.fanschou.com/blog/kafka-install-steps/20180424_01_003.png" alt="kafka-run-class"><br>这里将%CLASSPATH%外面加上双引号，用来解决这种情况</li><li>这里再多说一句，早前的kafka版本需要额外下载一个zookeeper，用来运行kafka，现在新的版本已经自带了一个zookeeper的server，直接启动即可。后面在启动服务时也会提到。<br>到这里，配置的问题基本解决了，下面开始启动服务</li></ul><h3 id="启动服务">启动服务</h3><p>此处仍以Windows下的操作为例，Linux下所不同的是执行shell脚本而非批处理文件。</p><p>首先进入到你解压的kafka根目录</p><ol><li><p>启动zookeeper</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/zookeeper-server-start.bat ./config/zookeeper.properties</span><br></pre></td></tr></table></figure></li><li><p>启动kafka</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/kafka-server-start.bat ./config/server.properties</span><br></pre></td></tr></table></figure></li><li><p>创建topic，这里命名为test</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure></li><li><p>启动生产者客户端</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/kafka-console-producer.bat --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure></li><li><p>启动消费者客户端</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginning This is a message</span><br></pre></td></tr></table></figure></li></ol><p>PS：最开始，我是单独下载zookeeper配置的server，在启动消费者客户端时会发生报错，但是依旧可以完成发送和订阅的操作，也把启动命令记在下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/windows/kafka-console-consumer.bat --zookeeper localhost:2181 --topic test</span><br></pre></td></tr></table></figure><p>接下来就可以在第4步打开的客户端上输入信息并回车，再进入第5步打开的客户端上查看是否收到了订阅</p><p>如果可以收到信息，那么这部分的环境搭建已经完成</p>]]></content>
    
    
    <summary type="html">本文是记录自己在学习 kafka 时第一次进行开发环境搭建时踩过的一些坑，写成一个安装教程，方便以后再次搭建开发环境的时候进行查看，安装教程主要以 Windows 系统进行演示，但 Linux 下大体相同。</summary>
    
    
    
    <category term="dev-env" scheme="https://www.fanschou.com/categories/dev-env/"/>
    
    
    <category term="kafka" scheme="https://www.fanschou.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>Hexo安装部署与同步</title>
    <link href="https://www.fanschou.com/env/hexo-install-steps/"/>
    <id>https://www.fanschou.com/env/hexo-install-steps/</id>
    <published>2018-08-16T14:36:53.000Z</published>
    <updated>2020-05-29T10:36:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>为了适应在多个设备切换进行博客书写的要求，利用 Github 仓库的分支分别存储 Hexo 源文件和发布出去的静态网页，这样只需在不同设备上将源文件分支同步之后，即可直接进行修改源文件进行发布，同时修改的源文件也可以提交到仓库的分支上。</p><h2 id="安装">安装</h2><h3 id="安装前提">安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，你必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="https://nodejs.org/zh-cn/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>如果你的电脑中已经安装上述必备程序，那么接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h3 id="安装-Git">安装 Git</h3><ul><li><p>Windows：点击上面的链接去官网下载后进行安装，记住在安装的选项中勾选<strong>Add to PATH</strong></p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><h3 id="安装-Node-js">安装 Node.js</h3><p>可以直接下载 <a href="https://nodejs.org/zh-cn/">安装程序</a> 来安装。</p><p>对于在Windows上安装的用户来说，和Git一样记住在安装的选项中勾选<strong>Add to PATH</strong>选项。</p><h3 id="安装-Hexo">安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>然后输入命令<code>hexo -v</code>，回车后输出hexo的版本号即为安装成功</p><h2 id="部署">部署</h2><p>以下内容皆是在Windows环境下的操作。</p><h3 id="Github准备">Github准备</h3><p>博客是在<a href="https://github.com/">Github</a>上托管维护的，所以当然需要一个Github的账号了。我的Github账号是FansChou，所以我创建的仓库名字就是<code>FansChou.github.io</code>。这里账号的大小写有没有影响，我没有试验，根据我的观察应该是不影响的。</p><p>建仓库时，名字固定为 <code>你的账号.github.io</code> 这样的形式，至于为什么是这种形式，是因为 Github Pages 提供了2种类型的页面</p><ul><li>一种是 <code>Project Pages</code> ，用来作为代码仓库的一个静态页面说明，这个是每个代码仓库都是可以有一个的</li><li>一种是 <code>User Pages</code> ，是提供给整个账号的，每个账号有且只有一个，是可以直接通过<code>你的账号.github.io</code>去这个地址去访问网页的，所以必须写成上面的那种格式。我们要部署的就是后一种的 <code>User Pages</code></li></ul><p>除此之外， 要想使用Git进行与远程仓库的交互，还需要一些配置，这些知识可以去网上搜索学习，这里只列出我们需要的。</p><ol><li><p>首先，设定本地的邮箱和用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email xxx@gmail.com</span><br><span class="line">git config --global user.name xxx</span><br></pre></td></tr></table></figure></li><li><p>然后生成SSH公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> c:/user/fans/.ssh</span><br><span class="line">ssh-keygen -t rsa -C xxx@gmail.com</span><br></pre></td></tr></table></figure><p>这里需要说明两件事：首先生成公钥的时候，最好进入当前用户的 <code>.ssh</code> 目录下，再去生成，第一次试的时候，在其他地方生成的，最后进行同步的时候找不到公钥；另外就是最后的公钥名称要以 <code>id_</code> 开头，这个比较奇怪，最开始我起了一个hexo的名字，同步的时候同样报找不到公钥，也是很郁闷，最后还是改成了 <code>id_rsa</code> ，没什么特殊要求的话，还是不作妖了，哈哈~</p></li><li><p>添加SSH公钥到Github账户</p><p>将 <code>.ssh</code> 目录下的 <code>id_rsa.pub</code> 文件用 VS CODE 打开，复制里面的内容。登陆Github，选择settings － SSH keys  － add ssh keys，然后把复制的内容全部粘贴进去即可</p></li></ol><h3 id="初始化">初始化</h3><p>经过以上的步骤，准备工作算是做好了，接下来就是初始化一个Hexo环境。</p><p>因为要使用 Github 进行同步，所以接下来先将建好的仓库clone一份到本地。找到之前建好的仓库地址，进行clone</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:FansChou/FansChou.github.io.git</span><br></pre></td></tr></table></figure><p>clone的地方会有一个文件夹生成，名字和仓库名一样 <code>FansChou.github.io</code> 。</p><p>然后，使用 Hexo 进行初始化，在你本地新建一个文件夹，进入之后，右键选择 <code>Git Bash Here</code> 进入命令行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>将刚刚生成的文件拷贝至从仓库clone生成的文件夹 <code>FansChou.github.io</code> 里面。</p><p>这里之所以不直接在 <code>FansChou.github.io</code> 生成hexo源文件，是因为在执行hexo命令的时候要求所在目录是一个空文件夹。</p><p>最后我们生成静态文件并在本地启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>这个时候我们进入浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a> 就可以进入hexo主页面了，此时的首页应该是一个Helloworld页面。</p><h3 id="同步博客源文件">同步博客源文件</h3><blockquote><p>如果你没有使用Github进行源文件同步的打算，那么请直接进入下一节进行发布吧！</p></blockquote><p>这个时候本地已经可以预览到博客的界面了，接下来就是利用 Github 去同步 Hexo 的源文件。这里的做法是建立2个分支，一个是master，一个是source，master分支用来发布生成的静态网页，source则用来同步 Hexo 的源文件。</p><p>建好仓库后默认会有一个master分支，我们先创建一个source分支。</p><p>首先进入<code>FansChou.github.io</code>文件夹，右键选择 <code>Git Bash Here</code> 进入命令行，创建并切换到source分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>将新分支推送给Github：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>这个时候登录Github去看你的仓库，会发现多了一个source的分支，建议把它设置为默认分支，因为后续的Git提交都是针对这个分支的。master分支作为静态网页的存放地点，一般不会直接用Git命令去提交，而是通过hexo插件去一次性部署提交。</p><p>然后我们把本地的源文件全部提交进仓库的source分支，在执行Git命令之前，请务必确认本地处于source分支下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;首次提交&quot;</span> <span class="comment">#提交注释</span></span><br><span class="line">git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p>现在远程仓库的source分支上就有了你的源文件，当你之后需要切换另一个设备进行博客撰写的时候，可以直接由仓库进行clone。</p><h3 id="发布博客">发布博客</h3><p>接下来就是将发布博客到 Github Pages 上。</p><p>发布之前先修改 <code>FansChou.github.io/_config.yml</code>文件中的<code>deploy</code>标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">git@github.com:FansChou/FansChou.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>repository换成你自己的仓库地址，branch默认是master，然后在<code>Git Bash Here</code>命令行里面安装deploy插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>进行generate生成静态文件并提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure><p>提交完成之后就可以直接用<code>你的账号.github.io</code>去访问你的博客网站啦！</p><h2 id="撰写博客">撰写博客</h2><h2 id="新建文章">新建文章</h2><p>这里只简单介绍一下如何新建一篇文章，具体的一些使用，可以直接去<a href="https://hexo.io/zh-cn/docs/">Hexo的官方文档</a>去学习。</p><p>执行新建文章命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;文章名称&quot;</span></span><br></pre></td></tr></table></figure><p>这个时候在<code>FansChou.github.io/source/_posts</code>就会有一个<code>文章名称.md</code>的文件，直接进行编辑，然后重新generate发布即可。</p>]]></content>
    
    
    <summary type="html">本文介绍了如何安装 Hexo 生成静态博客，以及如何将生成的静态博客部署 Github Pages 上供外部访问。同时我们利用 Github 的仓库进行静态网页和博客书写环境的同步，方便在不同的写作环境中进行切换。</summary>
    
    
    
    <category term="dev-env" scheme="https://www.fanschou.com/categories/dev-env/"/>
    
    
    <category term="hexo" scheme="https://www.fanschou.com/tags/hexo/"/>
    
  </entry>
  
</feed>
